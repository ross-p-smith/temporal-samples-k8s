---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml -o k8s/temporal.yaml
    kompose.version: 1.26.1 (1b040dd2)
    kompose.volume.type: configMap
  creationTimestamp: null
  labels:
    io.kompose.service: temporal
  name: temporal
spec:
  ports:
    - name: "7233"
      port: 7233
      targetPort: 7233
  selector:
    io.kompose.service: temporal
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml -o k8s/temporal.yaml
    kompose.version: 1.26.1 (1b040dd2)
    kompose.volume.type: configMap
  creationTimestamp: null
  labels:
    io.kompose.service: temporal
  name: temporal
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: temporal
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o k8s/temporal.yaml
        kompose.version: 1.26.1 (1b040dd2)
        kompose.volume.type: configMap
      creationTimestamp: null
      labels:
        io.kompose.network/temporal-network: "true"
        io.kompose.service: temporal
    spec:
      containers:
        - env:
            - name: DB
              value: postgresql
            - name: DB_PORT
              value: "5432"
            - name: DYNAMIC_CONFIG_FILE_PATH
              value: config/dynamicconfig/development-sql.yaml
            - name: ENABLE_ES
              value: "false"
            - name: ES_SEEDS
              value: elasticsearch
            - name: ES_VERSION
              value: v7
            - name: POSTGRES_PWD
              value: temporal
            - name: POSTGRES_SEEDS
              value: postgresql
            - name: POSTGRES_USER
              value: temporal
          image: temporalio/auto-setup:1.17.1
          name: temporal
          ports:
            - containerPort: 7233
          resources: {}
          volumeMounts:
            - mountPath: /etc/temporal/config/dynamicconfig
              name: temporal-cm0
      restartPolicy: Always
      volumes:
        - configMap:
            name: temporal-cm0
          name: temporal-cm0
      enableServiceLinks: false
status: {}
---
apiVersion: v1
data:
  README.md: |
    Use `docker.yaml` file to override the default dynamic config value (they are specified
    when creating the service config).

    Each key can have zero or more values and each value can have zero or more
    constraints. There are only three types of constraint:
    1. `namespace`: `string`
    2. `taskQueueName`: `string`
    3. `taskType`: `int` (`1`:`Workflow`, `2`:`Activity`)
    A value will be selected and returned if all its has exactly the same constraints
    as the ones specified in query filters (including the number of constraints).

    Please use the following format:
    ```
    testGetBoolPropertyKey:
      - value: false
      - value: true
        constraints:
          namespace: "global-samples-namespace"
      - value: false
        constraints:
          namespace: "samples-namespace"
    testGetDurationPropertyKey:
      - value: "1m"
        constraints:
          namespace: "samples-namespace"
          taskQueueName: "longIdleTimeTaskqueue"
    testGetFloat64PropertyKey:
      - value: 12.0
        constraints:
          namespace: "samples-namespace"
    testGetMapPropertyKey:
      - value:
          key1: 1
          key2: "value 2"
          key3:
            - false
            - key4: true
              key5: 2.0
    ```
  development-cass.yaml: |
    system.forceSearchAttributesCacheRefreshOnRead:
      - value: true # Dev setup only. Please don't turn this on in production.
        constraints: {}
  development-sql.yaml: |
    limit.maxIDLength:
      - value: 255
        constraints: {}
    system.forceSearchAttributesCacheRefreshOnRead:
      - value: true # Dev setup only. Please don't turn this on in production.
        constraints: {}
  docker.yaml: ""
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: temporal
  name: temporal-cm0
---
# apiVersion: networking.k8s.io/v1
# kind: NetworkPolicy
# metadata:
#   creationTimestamp: null
#   name: temporal-network
# spec:
#   ingress:
#     - from:
#         - podSelector:
#             matchLabels:
#               io.kompose.network/temporal-network: "true"
#   podSelector:
#     matchLabels:
#       io.kompose.network/temporal-network: "true"
